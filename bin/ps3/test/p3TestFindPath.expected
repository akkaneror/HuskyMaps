# FindPath test on a 7 node graph.  In particular, tests that
# longer but less expensive paths are returned, else the path
# with the least number of nodes.  Additionally, checks 
# multi-argument FindPath operations.

# set of core expensive nodes
created graph X
created node b5 with cost 5
created node b6 with cost 6
created node b7 with cost 7
added node b5 to X
added node b6 to X
added node b7 to X
added edge from b5 to b6 in X
added edge from b6 to b5 in X
added edge from b5 to b7 in X
added edge from b7 to b5 in X
added edge from b6 to b7 in X

# set of less expensive nodes
created node a1 with cost 1
created node a2 with cost 2
created node a3 with cost 3
added node a1 to X
added node a2 to X
added node a3 to X
added edge from b6 to a2 in X
added edge from b5 to a2 in X
added edge from b7 to a1 in X
added edge from b7 to a2 in X
added edge from b7 to a3 in X
added edge from a2 to b5 in X
added edge from a2 to a1 in X
added edge from a1 to a2 in X
added edge from a1 to b5 in X
added edge from a1 to b7 in X
added edge from a1 to a3 in X
added edge from a1 to a1 in X
added edge from a3 to b7 in X
created node c3 with cost 3
added node c3 to X
added edge from b5 to c3 in X
added edge from c3 to a3 in X

# test a less expensive path taken, no matter if less or more nodes
shortest path in X: a3 b7 a2
shortest path in X: b6 a2 a1 a3
shortest path in X: a3 b7 b5 b6

# test the shorter of two equally-expensive paths taken
shortest path in X: b5 c3 a3

# test multi-argument FindPath calls always follow the least
# expensive path, else the path with the least nodes
shortest path in X: c3 a3
shortest path in X: b6 a2 a1 a3
shortest path in X: a2 a1 b7
shortest path in X: b6 a2 a1
shortest path in X: c3 a3 b7 a2
shortest path in X: a2 a1 a3

# test equal expense and equal length
shortest path in X: a2 a1 b7

# test whether start node is included in expenses
shortest path in X: a2 a1 a3
shortest path in X: a3

