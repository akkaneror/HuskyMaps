

Their representation utilizes an elegant recursive approach.  Each WeightedNodePath object has access to it's end node as well as a link to the Path object before it in line.  To the PathFinder algorithem, it is only the end point that it is most interested in, plus the cumulative cost (which is handily story as a class field) Access to the earlier links of the Path is only needed in the final presentation of the Path as a desired "shortest route".  All use of Paths within the FindPath algorithm only needs access to the end node and total cost.  An ingenious use of an iterator allows access to previous links when the time comes.

Another approach that seems natural is storing a LinkedList structure that appends nodes as the Path is extended.  However, this does not support the immutable nature of a Path very well at all.  If mutable, this approach would work pretty well.  Same goes for using simple a Stack or Queue (depending if you wanted priority over access to the end point or starting point -> the end point is important for PathFinder)  Looking again at how the PathFinder exactly uses Paths, the general access to all links of the Path seems like something to reconsider, especially in the interest of protecting the immutability of the Path as the algorithm is called again and again.
